package com.montanamedialab.util;

import java.util.StringTokenizer;

/**
 * Abstract base for classes that convert a numeric time into some informal version.
 * 
 * @author phawkins@montanamedialab.com, hawkins.pete@gmail.com
 * Copyright 2013, 2014 Montana Medialab Limited
 * All rights reserved
 *
 */

public abstract class GenericInformalTimeUtil {

   /**
    * Converts a 'digital' time like 00:05 to an 'informal' form.
    * Classes that extend this abstract base class should override this method
    * if is to have sensible results.
    *  
    * @param digitalTime - format <hours>":"<minutes, where hours and minutes are Strings parseable to Java Integers, with HH between 0 and 23, and MM between 0 and 59
    * @return - informal time
    * 
    * @throws NumberFormatException if time format is invalid
    * 
    * Note that methods cannot be declared both abstract and static; this is sometimes considered a flaw in the Java language, since semantically this ought be possible
    */
    public static String digitalTimeToInformalTime(final String digitalTime) throws NumberFormatException {
        return "not implemented";
    }


    /**
     * Parse a stringified digital time into a DigitalTime bean with numeric hours and minutes.
     * 
     * @param digitalTime - format &lt;hours&gt;":"&lt;minutes&gt;, where hours and minutes are Strings parseable to Java Integeger
     * @return a DigitalTime bean
     * @throws NumberFormatException if digital time format invalid
     */
    protected static DigitalTime parseDigitalTime(String digitalTime) throws NumberFormatException {

        DigitalTime digitalTimeBean = null;

        try {

            StringTokenizer st = new StringTokenizer(digitalTime, ":");

            String digitalHours = st.nextToken();
            String digitalMinutes = st.nextToken();

            int minutes = Integer.parseInt(digitalMinutes);
            int hours = Integer.parseInt(digitalHours);

            validateHoursAndMinutes(hours, minutes);

            digitalTimeBean = new DigitalTime(hours, minutes);
        } catch (Exception e) {
            throw new NumberFormatException("Invalid digital time format: " + digitalTime);
        }

        return digitalTimeBean;
    }


    /**
     * Checks that hour and minutes within conventional 24 hour clock bounds.
     * 
     * @param hours - 0 to 23
     * @param minutes - 0 to 59
     * @throws NumberFormatException if digital time format invalid
     * */
    protected static void validateHoursAndMinutes(int hours, int minutes) throws NumberFormatException {
        if ((minutes >= 60 || minutes < 0) || (hours >= 24 || hours < 0)) {
            throw new NumberFormatException();
        }
    }


    /**
     * Bean class modeling digital time as hours and minutes.
     *
     */
    protected static class DigitalTime {
        private Integer mHours;
        private Integer mMinutes;

        // This is probably overkill, but the getters and setters autogenerated. It's standard
        // practice for beans, and using them makes code coverage tests happy
        // 
        DigitalTime(int hours, int minutes) {
            setMinutes(minutes);
            setHours(hours);
        }

        public Integer getHours() {
            return mHours;
        }

        public void setHours(Integer hours) {
            mHours = hours;
        }

        public Integer getMinutes() {
            return mMinutes;
        }

        public void setMinutes(Integer minutes) {
            mMinutes = minutes;
        }
    }
} /* FiN */
